<?phpnamespace  App\Auth\Domain;use function App\addLog;use App\Common\Exception\WrongRequestException;use  App\Auth\Domain\Rule as Rule;use  App\Auth\Model\Access;use  App\Auth\Model\Access as ModelAccess;/** * 组领域类 * * @author hms */class Group{    private static $Model = null;    public function  __construct()    {        if (self::$Model == null) {            self::$Model = new \App\Auth\Model\Group();        }    }    public function removeGroupUser($user_ids,$group_id)    {        $model_access = new Access();        if (is_array($user_ids)) {            \PhalApi\DI()->notorm->beginTransaction(DB_TICKET);            foreach ($user_ids as $user_id) {                $result = $model_access->delByUidAndGroupId($user_id, $group_id);                if ($result === false) {                    \PhalApi\DI()->notorm->rollback(DB_TICKET);                    throw new WrongRequestException('移除失败',1);                }else{                    addLog("移除用户所属用户组，用户编号[{$user_id}]，用户组编号[$group_id]");                }            }            \PhalApi\DI()->notorm->commit(DB_TICKET);        }    }	public function getalllist(){		return self::$Model->getalllist();	}    public function getGroupUserList($param)    {        if (is_object($param)) {            $param = get_object_vars($param);        }        $rs = array('list' => array(), 'count' => 0);        $rs['count'] = self::$Model->getGroupUserCount($param);        $rs['list'] = self::$Model->getGroupUserList($param);        return $rs;    }    /**获取组列表     * @param $apiObj Api对象，方便多参数获取     * @return array 数据对象     * @return array 数据对象[items] 数据项     * @return int 数据对象[count] 数据总数 用于分页     */    public function getGroupList($apiObj)    {        $rs = array('list' => array(), 'count' => 0);        $param = get_object_vars($apiObj);        $rs['count'] = self::$Model->getGroupCount($param['keyWord']);        $rs['list'] = self::$Model->getGroupList($param);        if ($rs['list']) {            foreach ($rs['list'] as &$item) {                if ($item['id'] == 7) {                    $item['_disabled'] = true;                }            }            unset($item);        }        return $rs;    }    /**添加组     * @param $apiObj api对象     * @return int 成功返回0，失败返回1，名称重复返回2，     */    public function addGroup($apiObj)    {        $param = get_object_vars($apiObj);        //检查名称重复，重复返回2        $r = self::$Model->checkRepeat($param['title']);        if ($r)            return 2;        //成功返回0，失败返回2        $r = self::$Model->addGroup($param);        return $r == true ? 0 : 1;    }    /**修改组     * @param $apiObj     * @return int 成功返回0，失败返回1，名称重复返回2     */    public function editGroup($apiObj)    {    	$result['result']='-1';        $param = get_object_vars($apiObj);        //检查名称重复，重复返回2           $r = self::$Model->checkRepeat($param['auth_group_title'], $param['id']);        if ($r){			$result['msg']='当前添加的数据已存在';			return $result;		}        //处理参数 ?这里为什么要给info赋值？        /*$info['auth_group_title'] = $param['auth_group_title'];        if ($param['auth_group_status'] != null) {            $info['auth_group_status'] = $param['auth_group_status'];        }		*/		//1.查找		        $r = self::$Model->editGroup($param['id'], $param);        if ($r == true) {            $id = $param['id'];            addLog("编辑用户组，编号：[$id]");			$result['msg']='成功';			$result['result']='1';        }		return $result;    }    /** 删除组     * @param array $ids id列表 如1,2,3     * @return int     * @throws WrongRequestException     */    public function delGroup($ids)    {        if (in_array(7, $ids)) {            throw new WrongRequestException('不能删除超级管理员分组', 1);        }        $r = self::$Model->delGroup($ids);        return $r == true ? 0 : 1;    }    /** 设置规则     * @param $id     * @param $rules     * @return int     */    public function setRules($id, $rules)    {        $info['rules'] = $rules;        $r = self::$Model->setRules($id, $info);        return $r == true ? 0 : 1;    }    /** 获取单个组信息     * @param $id     * @return mixed     */    public function getGroupOne($id)    {        $r = self::$Model->getGroupOne($id);        return $r;    }    public function getFullGroupOne($id,$format = false)    {        $info = $this->getGroupOne($id);		//var_dump($info);exit;        if ($info and $format) {            $info['total'] = array('rules'=>array(),'menus'=>array());            if ($format) {                $rules = $info['rules'];                $menus = $info['menus'];                if ($rules) {                    $rules = explode(',', trim($rules, ','));                    $rules = array_unique($rules);                    $ruleDomain = new Rule();                    $rules = $ruleDomain->getRulesInGroups($rules);                    $rules = \PhalApi\DI()->auth->formatList($rules);//                    $all_rules = $ruleDomain->getAllList(array('status'=> 1));//                    if($all_rules){//                        $all_rules = \PhalApi\DI()->auth->formatList($all_rules);//                        $first_length = 0;//                        foreach ($all_rules as $all_rule) {//                            foreach ($rules as $rule){//                                if($rule['id'] == $all_rule['id']){//                                    $first_length++;//                                }//                            }////                            if//                        }//                    }                }                if ($menus) {                    $menus = explode(',', trim($menus, ','));                    $menus = array_unique($menus);                    $menuDomain = new Menu();                    $menus = $menuDomain->getMenusInGroups($menus);                    $menus = \PhalApi\DI()->auth->formatList($menus);                    $menu_model_list = array();                    $temp_model_list = array();                    if ($menus) {                        $model_menuModel = new MenuModel();                        foreach ($menus as $item) {                            if (!in_array($item['model'], $temp_model_list)) {                                $temp_model_list[] = $item['model'];                            }                        }                        foreach ($temp_model_list as $item) {                            $model_info = $model_menuModel->getInfoByName($item);                            $menu_model_list[] = $model_info['id'];                        }                        $menu_model = new \App\Auth\Model\MenuModel();                        $temp_model_list = $menu_model->getListByWhere(array('id'=>$menu_model_list),'*','sort desc');                        $menus = array('menu_list'=>$menus,'menu_model_list'=>$temp_model_list);                    }                }                $info['rules'] = $rules;                $info['menus'] = $menus;            }        }        return $info;    }    /**组与用户关联操作     * 此操作会先把传递过来的用户id关联的所有组删除，然后在进行添加。     * 如果传过来的组id为空，则代表解除指定用户id所有关联的组。     * @param $apiObj     * @return int     */    public function assUser($apiObj)    {        if (is_object($apiObj)) {            $param = get_object_vars($apiObj);        }else{            $param = $apiObj;        }	        $accessModel = new ModelAccess();        //先删除当前用户的所有关联组        $accessModel->delByUid($param['uid']);        if ($param['group_id'] == '') {            return 0;        }	        //因为使用批量添加操作，所以得处理参数        $gids = explode(',', $param['group_id']);        //$gids = $param['group_id'];        $arr = array();        foreach ($gids as $key => $v) {            $arr[$key]['auth_group_access_uid'] = $param['uid'];            $arr[$key]['auth_group_access_group_id'] = $v;        }		        //执行批量添加        $r = $accessModel->assUser($arr);        return $r == true ? 0 : 1;    }    public function getUserInGroups($uid)    {    //    if(\PhalApi\DI()->cache===null){            $r=self::$Model->getUserInGroups($uid);    //    }else{    //        $r=self::$Model->getUserInGroupsCache($uid);    //    }        return $r;    }}